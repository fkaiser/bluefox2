#!/usr/bin/env python2
PACKAGE = "bluefox2"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("fps", double_t, 0, "frames per second", 20, 1, 200)
gen.add("color", bool_t, 0, "image encoding", False)
gen.add("hdr", bool_t, 0, "high dynamic range", False)

# Mirror mode
mm_enum = gen.enum([gen.const("mm_off", int_t, 0, "Mirror mode off"),
                    gen.const("mm_topdown", int_t, 1, "Top down"),
                    gen.const("mm_leftright", int_t, 2, "Left right"),
                    gen.const("mm_topdown_and_leftright", int_t, 3, "Top down and left right")],
                   "An enum to set mirror mode")
# Temporarily disable mm in dynamic reconfigure, you can only set it through
# launch file
# gen.add("mm", int_t, 0, "mirror mode", 0, 0, 3, edit_method=mm_enum)

# Gain db
gen.add("gain_db", double_t, 0, "gain in dB", 0.0, -1.0, 10.0)
# Auto gain control
gen.add("agc", bool_t, 0, "auto gain control", False)

# Expose us
gen.add("expose_us", int_t, 0, "expose us", 10000, 0, 100000)
# Auto expose control
aec_enum = gen.enum([gen.const("aec_off", int_t, 0, "Auto expose control off"),
                     gen.const("aec_on", int_t, 1, "Auto expose control on"),
                     gen.const(
                         "aec_fix", int_t, 2, "Fixed expose determined by driver")],
                    "An enum to set auto expose control")
gen.add("aec", int_t, 0, "auto expose control", 0, 0, 2, edit_method=aec_enum)

# Auto control Parameters
acs_enum = gen.enum([gen.const("acs_slow", int_t, 0, "auto control speed slow"),
                     gen.const("acs_medium", int_t, 1, "auto control_speed medium"),
                     gen.const("acs_fast", int_t, 2, "auto control_speed fast")],
                     "An enum to set auto control speed")
gen.add("acs", int_t, 0, "auto control speed", 2, 0, 2, edit_method=acs_enum)

# Desired average grey value
gen.add("des_grey_value", int_t, 0, "desired average grey value", 85, 0, 255);

# Dark current filter mode
dcfm_enum = gen.enum([gen.const("dcfm_off", int_t, 0, "dark current filter mode off"),
                      gen.const("dcfm_on", int_t, 1, "dark current filter mode on"),
                      gen.const("dcfm_calibrate", int_t, 2, "dark current filter mode calibrate"),
                      gen.const("correction_image", int_t, 3, "dark current filter mode send correction image")],
                     "An enum to set dark current filter mode")
gen.add("dcfm", int_t, 0, "dark current filter mode", 0, 0, 3, edit_method=dcfm_enum)

# Camera binning mode
gen.add("cbm", bool_t, 0, "camera binning mode", False)

# Camera trigger mode
ctm_enum = gen.enum([gen.const("ctm_continuous", int_t, 0, "camera trigger mode continuous"),
                     gen.const("ctm_on_demand", int_t, 1, "camera trigger mode on demand"),
                     gen.const("hard_sync", int_t, 2, "camera trigger mode hardware_sync (stereo only)")],
                    "An enum to set camera trigger mode")
gen.add("ctm", int_t, 0, "camera trigger mode", 0, 0, 2, edit_method=ctm_enum)

# This is just prefilling the capture queue
gen.add("boost", bool_t, 0, "Boost fps", False)

# White balance paramter
wbp_enum = gen.enum([gen.const("wbp_unavailable", int_t, -1, "not available"),
                     gen.const("wbp_tungsten", int_t, 0, "Tungsten"),
                     gen.const("wbp_halogen", int_t, 1, "Halogen"),
                     gen.const("wbp_fluorescent", int_t, 2, "Fluorescent"),
                     gen.const("wbp_daylight", int_t, 3, "Day light"),
                     gen.const("wbp_photolight", int_t, 4, "Photo Light"),
                     gen.const("wbp_bluesky", int_t, 5, "Blue Sky"),
                     gen.const("wbp_user1", int_t, 6, "User1"),
                     gen.const("wbp_calibrate", int_t, 10, "Calibrate")],
                    "An enum to set white balance paramter")
gen.add("wbp", int_t, 0, "white balance parameter", 6, -1, 10, edit_method=wbp_enum)

gen.add("r_gain", double_t, 0, "red gain", 1, 0, 10)
gen.add("g_gain", double_t, 0, "green gain", 1, 0, 10)
gen.add("b_gain", double_t, 0, "blue gain", 1, 0, 10)

exit(gen.generate(PACKAGE, "bluefox2", "Bluefox2Dyn"))
